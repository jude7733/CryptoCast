---
title: "2-data-cleaning"
format: html
---

# Preprocessing

## Load data
```{r}
crypto_data <- readRDS("data/crypto_data.rds")
```


## Sample data
```{r}
head(crypto_data$BTC)
```


## Top 10 coins data rows count
```{r}
top_cryptos = c('BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'MATIC', 'DOT', 'FTM')

row_counts <- lapply(crypto_data[top_cryptos], nrow)
print(row_counts)
```


## Summary of BTC
```{r}
summary(crypto_data$BTC)
```


## Missing values
```{r}
library(tidyverse)

missing_values_summary <- map(crypto_data, ~colSums(is.na(.)))
head(missing_values_summary)
```


## Sort by timestamp
```{r}
sort_by_time <- function(df) {
  df %>%
    arrange(timestamp)
}

crypto_data <- map(crypto_data, sort_by_time)
```


## Feature Engineering
### Open, High, Low, Adj Close, RSI, EMAF, EMAM, EMAS, Target, TargetClass, TargetNextClose

### Add lag of close by 1 step, moving avg and volatility of 10 hours
```{r}
library(dplyr)
library(zoo)

add_features <- function(df) {
  df %>%
    mutate(
      close_lag_1 = lag(close),
      ma_10 = rollmean(close, k = 10, fill = NA, align = "right"),
      volatility_10 = rollapply(close, width = 10, FUN = sd, fill = NA, align = "right")
      ) %>%
    na.omit()
}
```


## Add new features and extract feature columns
```{r}
feature_engineered_list <- map(crypto_data, add_features)

head(feature_engineered_list)
```


## Scale features
```{r}
scale_features <- function(df) {
  
  cols_to_scale <- c("open", "high", "low", "volume_from", "volume_to", 
                     "close_lag_1", "ma_10", "volatility_10")
  
  scaled_df <- df %>%
    mutate(across(all_of(cols_to_scale), ~ (.x - min(.x)) / (max(.x) - min(.x))))
  
  return(scaled_df)
}

final_data <- map(feature_engineered_list, scale_features)
head(final_data)
```
Note fields are 0 because their value was 0 or not coin isn't invented yet!


## Split by timestamp
```{r}
create_train_set <- function(df) {
  df %>%
    filter(timestamp < as.POSIXct("2025-01-01"))
}

create_test_set <- function(df) {
  df %>%
    filter(timestamp >= as.POSIXct("2025-01-01"))
}

train_data <- map(final_data, create_train_set)
test_data <- map(final_data, create_test_set)

head(test_data)
```


## Create feature and target sets
```{r}
create_feature_set <- function(df) {
  df %>%
    select(-close, -timestamp)
}

create_target_set <- function(df) {
  df %>%
    select(close)
}

xtrain_list <- map(train_data, create_feature_set)
ytrain_list <- map(train_data, create_target_set)
xtest_list <- map(test_data, create_feature_set)
ytest_list <- map(test_data, create_target_set)
```

  
## Final rows of BTC
```{r}
nrow(xtrain_list$BTC)
nrow(xtest_list$BTC)
nrow(ytrain_list$BTC)
nrow(ytest_list$BTC)
```


## Save splits
```{r}
saveRDS(xtrain_list, "data/xtrain_list.rds")
saveRDS(xtest_list, "data/xtest_list.rds")
saveRDS(ytrain_list, "data/ytrain_list.rds")
saveRDS(ytest_list, "data/ytest_list.rds")
```
