---
title: "Arima"
format: html
---

# Arima model forecasting

## Load data
```{r}
xtrain_list <- readRDS("data/xtrain_list.rds")
xtest_list <- readRDS("data/xtest_list.rds")
ytrain_list <- readRDS("data/ytrain_list.rds")
ytest_list <- readRDS("data/ytest_list.rds")
crypto_data_list <- readRDS("data/crypto_data.rds")
```

# Arima

## Install packages
```{r}
#install.packages("forecast", dependencies = TRUE)
```


## Training function
```{r}
library(forecast)

train_arima_model <- function(coin_name) {
  coin_y_train <- ytrain_list[[coin_name]]
  coin_ts <- ts(coin_y_train$close, frequency = 24)

  arima_model <- auto.arima(coin_ts)
  return(arima_model)
}
```


## Arima model for ETH
```{r}
arima_model = train_arima_model("ETH")
summary(arima_model)
```


## Forcasting function
```{r}
library(forecast)

predict_with_arima <- function(model_object, num_steps) {
  prediction <- forecast(model_object, h = num_steps)

  return(prediction)
}
```


## Prediction for ETH
```{r}
num_predictions <- nrow(ytest_list$BTC)
eth_forecast <- predict_with_arima(arima_model, num_predictions)
print(eth_forecast)
```


## Evaluation function
```{r}
calculate_rmse <- function(actual_values, predicted_values) {
  mse <- mean((actual_values - predicted_values)^2)
  rmse <- sqrt(mse)
  
  return(rmse)
}
```


## Evaluation
```{r}
predicted_values <- eth_forecast$mean
actual_values <- ytest_list$ETH$close

rmse <- calculate_rmse(actual_values, predicted_values)
cat(sprintf("Root Mean Squared Error on Test Data: $%.2f\n", rmse))
```


## Plotting arima prediction function
```{r}
library(ggplot2)
library(forecast)

create_forecast_plot <- function(coin_symbol, forecast_object, ytrain_list, ytest_list) {
  coin_y_train <- ytrain_list[[coin_symbol]]$close
  coin_y_test  <- ytest_list[[coin_symbol]]$close
  
  full_actual_data <- c(coin_y_train, coin_y_test)
  full_ts <- ts(full_actual_data, frequency = 24)
  
  plot_object <- ggplot() +
    autolayer(full_ts, series = "Actual Price", color = "black") +
    autolayer(forecast_object, series = "Forecast") +
    ggtitle(paste(coin_symbol, "Price Forecast vs Actual")) +
    xlab("Time (h)") +
    ylab("Price")
  
  return(plot_object)
}
```


## Plot prediction for ETH
```{r}
eth_plot <- create_forecast_plot("ETH", eth_forecast, ytrain_list, ytest_list)
print(eth_plot)
```


## Loop to make models for all coins
### Coin names
```{r}
coins <- names(ytrain_list)
print(coins)
```


## Training Loop
```{r}
library(tidyverse)

arima_model_list <- map(coins, train_arima_model)

names(arima_model_list) <- coins
```


## Sample Forcast for BTC
```{r}
num_predictions_btc <- nrow(ytest_list$BTC)
btc_forecast <- predict_with_arima(arima_model_list$BTC, num_predictions_btc)

print(btc_forecast)
```


## Save data
```{r}
saveRDS(arima_model_list, "data/arima_model_list.rds")
```

